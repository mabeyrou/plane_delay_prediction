services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db-network

  data_api:
    build:
      context: ./data_api
      dockerfile: Dockerfile
    container_name: data_api
    ports:
      - "${DATA_API_PORT}:${DATA_API_PORT}"
    env_file:
      - .env 
    environment:
      - APP_ENV=${APP_ENV:-local}
      - PYTHONPATH=/app
    depends_on:
      - postgres
    volumes:
      - ./data_api:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - db-network
      - app-network
      - monitoring

  ai_api:
    build:
      context: ./ai_api
      dockerfile: Dockerfile
    container_name: ai_api
    ports:
      - "${AI_API_PORT}:${AI_API_PORT}"
    env_file:
      - .env 
    environment:
      - APP_ENV=${APP_ENV:-local}
      - PYTHONPATH=/app
    depends_on:
      - data_api
    volumes:
      - ./ai_api:/app
      - ./mlruns:/mlruns
      - ./logs:/app/logs
    networks:
      - app-network
      - mlflow-network
      - monitoring

  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "${STREAMLIT_PORT}:${STREAMLIT_PORT}"
    env_file:
      - .env 
    depends_on:
      - ai_api
    environment:
      - API_URL=${API_URL:-http://ai_api:8000}
    volumes:
      - ./streamlit:/app
      - ./logs:/app/logs
    networks:
      - app-network

  mlflow-ui:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow-ui
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI:-file:///mlruns}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=${MLFLOW_DEFAULT_ARTIFACT_ROOT:-/mlruns}
    volumes:
      - ./mlruns:/mlruns
    command: mlflow ui --host 0.0.0.0 --port 5000
    networks:
      - mlflow-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}"
    env_file:
      - .env 
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    env_file:
      - .env 
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    depends_on:
      - data_api
      - ai_api
      - node-exporter
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    env_file:
      - .env 
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    volumes:
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime_kuma
    ports:
      - "${UPTIME_KUMA_PORT}:${UPTIME_KUMA_PORT}"
    env_file:
      - .env 
    volumes:
      - uptime-kuma-data:/app/data
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  uptime-kuma-data:
  postgres-data:

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge
  db-network:
    driver: bridge
  mlflow-network:
    driver: bridge